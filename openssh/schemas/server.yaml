%YAML 1.1
---
"$schema": "http://json-schema.org/draft-06/schema#"
title: openssh server role
description: |
  openssh server configurathion
type: object
additionalProperties: false

required:
- enabled
- user

properties:
  enabled:
    description: |
      Enables openssh server configurathion.
    type: boolean
  banner:
    description: |
      Banner
      ------
      The contents of the specified file are sent to the remote user
      before authentication is allowed.  If the argument is “none” then
      no banner is displayed.  By default, no banner is displayed.
    type: string
  bind:
    description: Specifies sshd servcive listen on configurathion.
    type: object
    properties:
      port:
        description: |
          Specifies the local addresses sshd should listen on.
        type: integer
      address:
        description: Specifies the port on which the server listens for connections. Multiple options are permitted.
        type: string
        example: 127.0.0.1 192.168.1.1
  challenge_response_auth:
    description: |
      ChallengeResponseAuthentication
      -----------------------
      Specifies to enable challenge-response passwords.
      The default is False(“no”).
    type: boolean
  host_auth:
    description: |
      HostbasedAuthentication
      -----------------------
      Specifies whether rhosts or /etc/hosts.equiv authentication
      together with successful public key client host authentication is
      allowed (host-based authentication). The default is False(“no”).
    type: boolean
  ignore_rhosts:
    description: |
      IgnoreRhosts
      ------------
      Specifies that .rhosts and .shosts files will not be used in
      RhostsRSAAuthentication or HostbasedAuthentication.
      .
      /etc/hosts.equiv and /etc/ssh/shosts.equiv are still used.  The
      default is True (“yes”).
    type: boolean
  kerberos_auth:
    description: |
      KerberosAuthentication
      ----------------------
      Specifies whether the password provided by the user for
      PasswordAuthentication will be validated through the Kerberos
      KDC.  To use this option, the server needs a Kerberos servtab
      which allows the verification of the KDC's identity. The default
      is False (“no”).
    type: boolean
  syslog_facility:
    description: |
      SyslogFacility
      --------
      Gives the facility code that is used when logging messages from
      sshd(8). The possible values are: DAEMON, USER, AUTH, AUTHPRIV,
      LOCAL0, LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7.
      The default is AUTH.
    enum:
      - daemon
      - user
      - auth
      - authpriv
      - local0
      - local1
      - local2
      - local3
      - local4
      - local5
      - local6
      - local7
  log_level:
    description: |
      LogLevel
      --------
      Gives the verbosity level that is used when logging messages from
      sshd(8).  The possible values are: QUIET, FATAL, ERROR, INFO,
      VERBOSE, DEBUG, DEBUG1, DEBUG2, and DEBUG3.  The default is INFO.
      DEBUG and DEBUG1 are equivalent.  DEBUG2 and DEBUG3 each specify
      higher levels of debugging output.  Logging with a DEBUG level
      violates the privacy of users and is not recommended.
    enum:
      - quiet
      - fatal
      - error
      - info
      - verbose
      - debug
      - debug1
      - debug2
      - debug3
  login_grace_time:
    description: |
      LoginGraceTime
      --------------
      The server disconnects after this time if the user has not
      successfully logged in.  If the value is 0, there is no time
      limit.  The default is 120 seconds.
    type: integer
  mac_algorithms:
    description: |
      MACs
      ----
      Specifies the available MAC (message authentication code)
      algorithms.  The MAC algorithm is used for data integrity
      protection.  Multiple algorithms must be comma-separated.  If the
      specified value begins with a ‘+’ character, then the specified
      algorithms will be appended to the default set instead of
      replacing them.
      .
      The algorithms that contain “-etm” calculate the MAC after
      encryption (encrypt-then-mac).  These are considered safer and
      their use recommended. The supported MACs are:
        hmac-md5
        hmac-md5-96
        hmac-ripemd160
        hmac-sha1
        hmac-sha1-96
        hmac-sha2-256
        hmac-sha2-512
        umac-64@openssh.com
        umac-128@openssh.com
        hmac-md5-etm@openssh.com
        hmac-md5-96-etm@openssh.com
        hmac-ripemd160-etm@openssh.com
        hmac-sha1-etm@openssh.com
        hmac-sha1-96-etm@openssh.com
        hmac-sha2-256-etm@openssh.com
        hmac-sha2-512-etm@openssh.com
        umac-64-etm@openssh.com
        umac-128-etm@openssh.com
      .
      The default is:
        umac-64-etm@openssh.com,umac-128-etm@openssh.com,
        hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,
        hmac-sha1-etm@openssh.com,
        umac-64@openssh.com,umac-128@openssh.com,
        hmac-sha2-256,hmac-sha2-512,hmac-sha1
    type: object
    properties:
      enabled:
        description: |
          Enables / disabled specific MAC algorithm.
        type: boolean
  max_auth_tries:
    description: |
      MaxAuthTries
      ------------
      Specifies the maximum number of authentication attempts permitted
      per connection.  Once the number of failures reaches half this
      value, additional failures are logged.  The default is 6.
    type: integer
  password_auth:
    description: |
      PasswordAuthentication
      ----------------------
      Specifies whether password authentication is allowed.  The
      default is True(“yes”).
    type: boolean
  permit_empty_passwords:
    description: |
      PermitEmptyPasswords
      --------------------
      When password authentication is allowed, it specifies whether the
      server allows login to accounts with empty password strings.  The
      default is False (“no”).
    type: boolean
  permit_root_login:
    description: |
      PermitRootLogin
      ---------------
      Specifies whether root can log in using ssh(1).  The argument
      must be “yes”, “prohibit-password”, “without-password”,
      “forced-commands-only”, or “no”.  The default is
      “prohibit-password”.
      .
      If this option is set to “prohibit-password” or
      “without-password”, password and keyboard-interactive
      authentication are disabled for root.
      .
      If this option is set to “forced-commands-only”, root login with
      public key authentication will be allowed, but only if the
      command option has been specified (which may be useful for taking
      remote backups even if root login is normally not allowed).  All
      other authentication methods are disabled for root.
      .
      If this option is set to “no”, root is not allowed to log in.
      # TODO Currently its only boolean option, however, support for other
      #      values has been added recently to sshd_config template, now
      #      it may use both booleans and strings.
      #      Now the next step is to update reclass models and switch
      #      from boolean values to strings.
    # enum:
    #  - yes
    #  - no
    #  - without-password
    #  - forced-commands-only
    #  - prohibit-password
    type: boolean
  permit_user_environment:
    description: |
      PermitUserEnvironment
      ---------------------
      Specifies whether ~/.ssh/environment and environment= options in
      ~/.ssh/authorized_keys are processed by sshd(8).  The default is
      False (“no”).  Enabling environment processing may enable users to
      bypass access restrictions in some configurations using mechanisms
      such as LD_PRELOAD.
    type: boolean
  protocol:
    description: |
      Protocol
      --------
      Specifies the protocol versions sshd(8) supports.  The possible
      values are ‘1’ and ‘2’.  Multiple versions must be comma-
      separated.  The default is ‘2’.  Protocol 1 suffers from a number
      of cryptographic weaknesses and should not be used.  It is only
      offered to support legacy devices.
      .
      Note that the order of the protocol list does not indicate
      preference, because the client selects among multiple protocol
      versions offered by the server.  Specifying “2,1” is identical to
      “1,2”.
    type: integer
  public_key_auth:
    description: |
      PubkeyAuthentication
      --------------------
      Specifies whether public key authentication is allowed.  The
      default is True (“yes”).
    type: boolean
  user:
    description: |
      List of openssh user's, to be configured.
    type: object
    additionalProperties: false
    patternProperties:
      '^[a-z][-a-z0-9_]*$': #  man 5 adduser.conf
        type: object
        minProperties: 1
        additionalProperties: false
        required:
          - enabled
        properties:
          enabled:
            type: boolean
          public_keys:
            description: List of pub keys for user (> authorized_keys)
            type: array
            items:
              type: object
              additionalProperties: false
              properties:
                key:
                  type: string
                  description: ssh public key
                  example: "ssh-rsa AAAAXXX username@example.com"
            example:
            - key: "ssh-rsa AAAAXXX1111 username@example.com"
            - key: "ssh-rsa AAAAXXX2222 username@example.com"
          user: #  man 5 adduser.conf
            $ref: "#/definitions/_global_useradd_user"

  alive:
    description: Configure ClientAlive* option's.
    type: object
    parameters:
      keep:
        description: Specifies whether the system should send TCP keepalive messages to the other side
        type: string
        enum:
          - yes
          - no
      interval:
        description: |
          ClientAliveInterval
          -------------------
          Sets a timeout interval in seconds after which if no data has
          been received from the client, sshd(8) will send a message
          through the encrypted channel to request a response from the
          client.  The default is 0, indicating that these messages will
          not be sent to the client.
        type: integer
        example: 600
      count:
        description: |
          ClientAliveCountMax
          -------------------
          Sets the number of client alive messages (see below) which may be
          sent without sshd(8) receiving any messages back from the client.
          If this threshold is reached while client alive messages are
          being sent, sshd will disconnect the client, terminating the
          session.  It is important to note that the use of client alive
          messages is very different from TCPKeepAlive (below).  The client
          alive messages are sent through the encrypted channel and
          therefore will not be spoofable.  The TCP keepalive option
          enabled by TCPKeepAlive is spoofable.  The client alive mechanism
          is valuable when the client or server depend on knowing when a
          connection has become inactive.
          .
          The default value is 3.  If ClientAliveInterval (see below) is
          set to 15, and ClientAliveCountMax is left at the default,
          unresponsive SSH clients will be disconnected after approximately
          45 seconds.
        type: integer
        example: 3
  force_command:
    description: |
      Forces the execution of the command specified by ForceCommand, ignoring any command supplied by the client and ~/.ssh/rc if present.
    type: string
  use_dns:
    description: |
      Specifies whether sshd should look up the remote host name, and to
      check that the resolved host name for the remote IP address maps back to the very same IP address
    type: boolean


definitions:
  _global_useradd_user:
    description: Define exactly one linux user login data.
    additionalProperties: false
    type: object
    required:
      - enabled
      - name
    properties:
      enabled:
        type: boolean
      home:
        type: string
        example: "/home/user123"
      password:
        type: string
        example: "$6$cJ/vINf7$Wof3.L7L1lKqMFAKoTKxESKOZNSNc.K7BkeJNIXY5bETFjbS200njx9j.Y152wfFRoNXs6b3qBEF5Co0uNeyQ0" # r00tme
      name:
        type: string
        example: user123
      shell:
        type: string
        example: "/bin/sh"
      sudo:
        type: boolean
        description: Allow user to use sudo
      email:
        type: string
        example: example@mail.com
      full_name:
        type: string
        example: "Cloud Infrastructure user"
      uid:
        type: integer
